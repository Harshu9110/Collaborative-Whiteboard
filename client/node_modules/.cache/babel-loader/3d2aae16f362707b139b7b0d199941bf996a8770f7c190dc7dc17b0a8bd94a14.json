{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Harsh Srivastava\\\\OneDrive\\\\Desktop\\\\Mern Stack\\\\Whiteboard\\\\Whiteboard\\\\client\\\\src\\\\components\\\\DrawingCanvas.js\",\n  _s = $RefreshSig$();\nimport { useRef, useEffect, useState, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DrawingCanvas = ({\n  socket,\n  drawingSettings,\n  onCursorMove\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [currentPath, setCurrentPath] = useState([]);\n  const resizeCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const container = canvas.parentElement;\n    canvas.width = container.clientWidth;\n    canvas.height = container.clientHeight;\n  }, []);\n  useEffect(() => {\n    resizeCanvas();\n    window.addEventListener(\"resize\", resizeCanvas);\n    return () => window.removeEventListener(\"resize\", resizeCanvas);\n  }, [resizeCanvas]);\n  useEffect(() => {\n    if (!socket) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    socket.on(\"room-data\", drawingData => {\n      // Clear canvas and redraw from saved data\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawingData.forEach(command => {\n        if (command.type === \"clear\") {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n        } else if (command.type === \"stroke\" && command.data.path) {\n          drawPath(ctx, command.data);\n        }\n      });\n    });\n    socket.on(\"draw-start\", data => {\n      // Other users started drawing\n    });\n    socket.on(\"draw-move\", data => {\n      if (data.path && data.path.length > 1) {\n        drawPath(ctx, data);\n      }\n    });\n    socket.on(\"draw-end\", data => {\n      if (data.path) {\n        drawPath(ctx, data);\n      }\n    });\n    socket.on(\"clear-canvas\", () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    });\n    return () => {\n      socket.off(\"room-data\");\n      socket.off(\"draw-start\");\n      socket.off(\"draw-move\");\n      socket.off(\"draw-end\");\n      socket.off(\"clear-canvas\");\n    };\n  }, [socket]);\n  const drawPath = (ctx, data) => {\n    if (!data.path || data.path.length < 2) return;\n    ctx.beginPath();\n    ctx.strokeStyle = data.color || \"#000000\";\n    ctx.lineWidth = data.strokeWidth || 3;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    ctx.moveTo(data.path[0].x, data.path[0].y);\n    for (let i = 1; i < data.path.length; i++) {\n      ctx.lineTo(data.path[i].x, data.path[i].y);\n    }\n    ctx.stroke();\n  };\n  const getMousePos = e => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n  };\n  const getTouchPos = e => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: e.touches[0].clientX - rect.left,\n      y: e.touches[0].clientY - rect.top\n    };\n  };\n  const startDrawing = pos => {\n    setIsDrawing(true);\n    const newPath = [pos];\n    setCurrentPath(newPath);\n    socket.emit(\"draw-start\", {\n      color: drawingSettings.color,\n      strokeWidth: drawingSettings.strokeWidth\n    });\n  };\n  const draw = pos => {\n    if (!isDrawing) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const newPath = [...currentPath, pos];\n    setCurrentPath(newPath);\n\n    // Draw locally\n    ctx.beginPath();\n    ctx.strokeStyle = drawingSettings.color;\n    ctx.lineWidth = drawingSettings.strokeWidth;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    if (newPath.length > 1) {\n      const prevPos = newPath[newPath.length - 2];\n      ctx.moveTo(prevPos.x, prevPos.y);\n      ctx.lineTo(pos.x, pos.y);\n      ctx.stroke();\n    }\n\n    // Send to other users (throttled)\n    socket.emit(\"draw-move\", {\n      path: newPath,\n      color: drawingSettings.color,\n      strokeWidth: drawingSettings.strokeWidth\n    });\n  };\n  const stopDrawing = () => {\n    if (!isDrawing) return;\n    setIsDrawing(false);\n    socket.emit(\"draw-end\", {\n      path: currentPath,\n      color: drawingSettings.color,\n      strokeWidth: drawingSettings.strokeWidth\n    });\n    setCurrentPath([]);\n  };\n\n  // Mouse events\n  const handleMouseDown = e => {\n    const pos = getMousePos(e);\n    startDrawing(pos);\n  };\n  const handleMouseMove = e => {\n    const pos = getMousePos(e);\n    onCursorMove(pos.x, pos.y);\n    if (isDrawing) {\n      draw(pos);\n    }\n  };\n  const handleMouseUp = () => {\n    stopDrawing();\n  };\n\n  // Touch events\n  const handleTouchStart = e => {\n    e.preventDefault();\n    const pos = getTouchPos(e);\n    startDrawing(pos);\n  };\n  const handleTouchMove = e => {\n    e.preventDefault();\n    const pos = getTouchPos(e);\n    if (isDrawing) {\n      draw(pos);\n    }\n  };\n  const handleTouchEnd = e => {\n    e.preventDefault();\n    stopDrawing();\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"drawing-canvas\",\n    onMouseDown: handleMouseDown,\n    onMouseMove: handleMouseMove,\n    onMouseUp: handleMouseUp,\n    onMouseLeave: handleMouseUp,\n    onTouchStart: handleTouchStart,\n    onTouchMove: handleTouchMove,\n    onTouchEnd: handleTouchEnd\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_s(DrawingCanvas, \"AvFUV36PDrHnhPfwRjUqYv2yy88=\");\n_c = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c;\n$RefreshReg$(_c, \"DrawingCanvas\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useRef","useEffect","useState","useCallback","jsxDEV","_jsxDEV","DrawingCanvas","socket","drawingSettings","onCursorMove","canvasRef","isDrawing","setIsDrawing","currentPath","setCurrentPath","resizeCanvas","canvas","current","container","parentElement","width","clientWidth","height","clientHeight","window","addEventListener","removeEventListener","ctx","getContext","on","drawingData","clearRect","forEach","command","type","data","path","drawPath","length","off","beginPath","strokeStyle","color","lineWidth","strokeWidth","lineCap","lineJoin","moveTo","x","y","i","lineTo","stroke","getMousePos","e","rect","getBoundingClientRect","clientX","left","clientY","top","getTouchPos","touches","startDrawing","pos","newPath","emit","draw","prevPos","stopDrawing","handleMouseDown","handleMouseMove","handleMouseUp","handleTouchStart","preventDefault","handleTouchMove","handleTouchEnd","ref","className","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Harsh Srivastava/OneDrive/Desktop/Mern Stack/Whiteboard/Whiteboard/client/src/components/DrawingCanvas.js"],"sourcesContent":["\"use client\"\n\nimport { useRef, useEffect, useState, useCallback } from \"react\"\n\nconst DrawingCanvas = ({ socket, drawingSettings, onCursorMove }) => {\n  const canvasRef = useRef(null)\n  const [isDrawing, setIsDrawing] = useState(false)\n  const [currentPath, setCurrentPath] = useState([])\n\n  const resizeCanvas = useCallback(() => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const container = canvas.parentElement\n    canvas.width = container.clientWidth\n    canvas.height = container.clientHeight\n  }, [])\n\n  useEffect(() => {\n    resizeCanvas()\n    window.addEventListener(\"resize\", resizeCanvas)\n    return () => window.removeEventListener(\"resize\", resizeCanvas)\n  }, [resizeCanvas])\n\n  useEffect(() => {\n    if (!socket) return\n\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext(\"2d\")\n\n    socket.on(\"room-data\", (drawingData) => {\n      // Clear canvas and redraw from saved data\n      ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n      drawingData.forEach((command) => {\n        if (command.type === \"clear\") {\n          ctx.clearRect(0, 0, canvas.width, canvas.height)\n        } else if (command.type === \"stroke\" && command.data.path) {\n          drawPath(ctx, command.data)\n        }\n      })\n    })\n\n    socket.on(\"draw-start\", (data) => {\n      // Other users started drawing\n    })\n\n    socket.on(\"draw-move\", (data) => {\n      if (data.path && data.path.length > 1) {\n        drawPath(ctx, data)\n      }\n    })\n\n    socket.on(\"draw-end\", (data) => {\n      if (data.path) {\n        drawPath(ctx, data)\n      }\n    })\n\n    socket.on(\"clear-canvas\", () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height)\n    })\n\n    return () => {\n      socket.off(\"room-data\")\n      socket.off(\"draw-start\")\n      socket.off(\"draw-move\")\n      socket.off(\"draw-end\")\n      socket.off(\"clear-canvas\")\n    }\n  }, [socket])\n\n  const drawPath = (ctx, data) => {\n    if (!data.path || data.path.length < 2) return\n\n    ctx.beginPath()\n    ctx.strokeStyle = data.color || \"#000000\"\n    ctx.lineWidth = data.strokeWidth || 3\n    ctx.lineCap = \"round\"\n    ctx.lineJoin = \"round\"\n\n    ctx.moveTo(data.path[0].x, data.path[0].y)\n    for (let i = 1; i < data.path.length; i++) {\n      ctx.lineTo(data.path[i].x, data.path[i].y)\n    }\n    ctx.stroke()\n  }\n\n  const getMousePos = (e) => {\n    const canvas = canvasRef.current\n    const rect = canvas.getBoundingClientRect()\n    return {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top,\n    }\n  }\n\n  const getTouchPos = (e) => {\n    const canvas = canvasRef.current\n    const rect = canvas.getBoundingClientRect()\n    return {\n      x: e.touches[0].clientX - rect.left,\n      y: e.touches[0].clientY - rect.top,\n    }\n  }\n\n  const startDrawing = (pos) => {\n    setIsDrawing(true)\n    const newPath = [pos]\n    setCurrentPath(newPath)\n\n    socket.emit(\"draw-start\", {\n      color: drawingSettings.color,\n      strokeWidth: drawingSettings.strokeWidth,\n    })\n  }\n\n  const draw = (pos) => {\n    if (!isDrawing) return\n\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext(\"2d\")\n\n    const newPath = [...currentPath, pos]\n    setCurrentPath(newPath)\n\n    // Draw locally\n    ctx.beginPath()\n    ctx.strokeStyle = drawingSettings.color\n    ctx.lineWidth = drawingSettings.strokeWidth\n    ctx.lineCap = \"round\"\n    ctx.lineJoin = \"round\"\n\n    if (newPath.length > 1) {\n      const prevPos = newPath[newPath.length - 2]\n      ctx.moveTo(prevPos.x, prevPos.y)\n      ctx.lineTo(pos.x, pos.y)\n      ctx.stroke()\n    }\n\n    // Send to other users (throttled)\n    socket.emit(\"draw-move\", {\n      path: newPath,\n      color: drawingSettings.color,\n      strokeWidth: drawingSettings.strokeWidth,\n    })\n  }\n\n  const stopDrawing = () => {\n    if (!isDrawing) return\n\n    setIsDrawing(false)\n\n    socket.emit(\"draw-end\", {\n      path: currentPath,\n      color: drawingSettings.color,\n      strokeWidth: drawingSettings.strokeWidth,\n    })\n\n    setCurrentPath([])\n  }\n\n  // Mouse events\n  const handleMouseDown = (e) => {\n    const pos = getMousePos(e)\n    startDrawing(pos)\n  }\n\n  const handleMouseMove = (e) => {\n    const pos = getMousePos(e)\n    onCursorMove(pos.x, pos.y)\n\n    if (isDrawing) {\n      draw(pos)\n    }\n  }\n\n  const handleMouseUp = () => {\n    stopDrawing()\n  }\n\n  // Touch events\n  const handleTouchStart = (e) => {\n    e.preventDefault()\n    const pos = getTouchPos(e)\n    startDrawing(pos)\n  }\n\n  const handleTouchMove = (e) => {\n    e.preventDefault()\n    const pos = getTouchPos(e)\n\n    if (isDrawing) {\n      draw(pos)\n    }\n  }\n\n  const handleTouchEnd = (e) => {\n    e.preventDefault()\n    stopDrawing()\n  }\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"drawing-canvas\"\n      onMouseDown={handleMouseDown}\n      onMouseMove={handleMouseMove}\n      onMouseUp={handleMouseUp}\n      onMouseLeave={handleMouseUp}\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n    />\n  )\n}\n\nexport default DrawingCanvas\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}